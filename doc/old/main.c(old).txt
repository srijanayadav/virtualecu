/*
 *	Project Owner	: TU Chemnitz
 *	Project Name	: ASE Tutorial Unit-1
 *	File Name		: main.c
 *	Author			: ASE Admin
 *  Created on		: 25 Feb 2024
 */

/* Includes ******************************************************************/
#include "init.h"

#include "xpc56el.h"
#include "siu.h"

/* Global variables **********************************************************/

// put any global variables you need here
int counter_value = 0;
int counter_mode = 1; // 1 = count up, 0 = count down

/* Task-1 implementation *****************************************************/
void task_pot(int x)
{

	/* TO-DO: your task implementations **************************************/

	/*************************************************************************/
	int thresholds[] = {682, 1364, 2046, 2728, 3410};
	int leds[] = {59, 43, 58, 57, 56, 6}; // U1, U2, Tx, Rx, P

	for (int i = 0; i < 6; i++)
	{
		SIU.GPDO[leds[i]].R = (x >= thresholds[i]) ? 1 : 0;
	}
}

/* Task-2 implementation *****************************************************/
void task_ldr(int x)
{

	/* TO-DO: your task implementations **************************************/

	task_pot(x); // Reuse same LED logic for light sensor values

	/*************************************************************************/
}

/* Task-3 implementation *****************************************************/
void task_counter(void)
{

	/* TO-DO: your task implementations **************************************/
	int u1 = (counter_value >> 2) & 1;
	int u2 = (counter_value >> 1) & 1;
	int u3 = counter_value & 1;

	SIU.GPDO[59].R = u1; // U1 (D[11])
	SIU.GPDO[43].R = u2; // U2 (C[11])
	SIU.GPDO[6].R = u3;	 // U3 (A[6])

	/*************************************************************************/
}

/*
 * @brief	Main program
 *
 * @param	void
 * @retval	int
 */
int main(void)
{
	/* peripherals initialization, do not remove */
	peripheralsInit();

	/* TO-DO: your task implementations **************************************/

	/* Configure and start timer channels */
	// PIT_ConfigureTimer(<channel>, <interval in milliseconds>);
	PIT_ConfigureTimer(1, 1000);
	PIT_StartTimer(1);

	/*************************************************************************/

	/* main program */
	while (1)
	{
		/* System function, do not remove */
		systemFunction();
		/* TO-DO: your task implementations **********************************/
		int sw1 = SIU.GPDI[52].R;
		int sw2 = SIU.GPDI[53].R;
		int sw3 = SIU.GPDI[54].R;
		int sw4 = SIU.GPDI[55].R;
		int bt1 = SIU.GPDI[60].R;
		int bt2 = SIU.GPDI[62].R;

		if (bt1)
			counter_mode = 1;
		if (bt2)
			counter_mode = 0;

		if (sw1)
		{
			int pot_value = (ADC0.CDR[5].R & 0x00000FFF);
			task_pot(pot_value);
		}
		else if (!sw1 && sw2)
		{
			int ldr_value = (ADC1.CDR[3].R & 0x00000FFF);
			task_ldr(ldr_value);
		}
		else if (!sw1 && !sw2 && sw3 && sw4)
		{
			task_counter();
		}
		else
		{
			for (int i = 0; i < 6; i++)
				SIU.GPDO[7 + i].R = 0; // Turn off LEDs
		}

		/*********************************************************************/

		/* 10 ms OS delay */
		osalThreadDelayMilliseconds(10UL);
	}
}

/*
 * @brief	PIT timer channel 1 IRQ callback
 *
 * @param	void
 * @retval	void
 */
void PIT_Channel_1(void)
{

	/* TO-DO: your task implementations **************************************/
	if (counter_mode)
	{
		counter_value = (counter_value + 1) % 8;
	}
	else
	{
		counter_value = (counter_value - 1 + 8) % 8;
	}

	/*************************************************************************/
}

/*
 * @brief	PIT timer channel 2 IRQ callback
 *
 * @param	void
 * @retval	void
 */
void PIT_Channel_2(void)
{

	/* TO-DO: your task implementations **************************************/

	/*************************************************************************/
}

/*
 * @brief	PIT timer channel 3 IRQ callback
 *
 * @param	void
 * @retval	void
 */
void PIT_Channel_3(void)
{

	/* TO-DO: your task implementations **************************************/

	/*************************************************************************/
}
